<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Dashboard - socialnetto</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
</head>
<body class="bg-gray-50 min-h-screen">
    <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <h1 class="text-2xl font-bold text-indigo-600">socialnetto</h1>
                </div>
                <div class="flex items-center space-x-4">
                    <a href="/" class="text-gray-600 hover:text-indigo-600 transition-colors">Home</a>
                    <a href="/create" class="text-gray-600 hover:text-indigo-600 transition-colors">Create Post</a>
                </div>
            </div>
        </div>
    </nav>

    <main class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="bg-white rounded-xl shadow-lg overflow-hidden">
            <div class="p-8">
                <div id="info" class="mb-8">
                    <div class="flex items-center space-x-4">
                        <img src="" alt="Profile" class="w-24 h-24 rounded-full object-cover border-4 border-indigo-200">
                        <div>
                            <h2 class="text-2xl font-bold text-gray-900"></h2>
                            <p class="text-gray-600"></p>
                        </div>
                    </div>
                </div>

                <div class="flex flex-wrap gap-4 mb-8">
                    <button onclick="logout()" 
                        class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                        Logout
                    </button>
                    <button onclick="window.location.href='/create'" 
                        class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors">
                        Create Post
                    </button>
                    <button onclick="window.location.href='/'" 
                        class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors">
                        Go Home
                    </button>
                </div>

                <form id="updateForm" class="space-y-6">
                    <h3 class="text-xl font-semibold text-gray-900">Update Profile</h3>
                    <p class="text-sm text-gray-600">Update any of the fields below to change your profile information</p>

                    <div class="grid grid-cols-1 gap-6">
                        <div>
                            <label for="username" class="block text-sm font-medium text-gray-700">Username</label>
                            <input type="text" id="username" 
                                class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                placeholder="New username">
                        </div>

                        <div>
                            <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                            <input type="email" id="email" 
                                class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                placeholder="New email">
                        </div>

                        <div>
                            <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                            <input type="password" id="password" 
                                class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                placeholder="New password">
                        </div>

                        <div>
                            <label for="bio" class="block text-sm font-medium text-gray-700">Bio</label>
                            <textarea id="bio" rows="3" 
                                class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                placeholder="Tell us about yourself"></textarea>
                        </div>

                        <div>
                            <label for="avatar" class="block text-sm font-medium text-gray-700">Profile Picture</label>
                            <input type="file" id="avatar" accept="image/*"
                                class="mt-1 block w-full px-3 py-2 text-sm text-gray-700 
                                file:mr-4 file:py-2 file:px-4
                                file:rounded-full file:border-0
                                file:text-sm file:font-semibold
                                file:bg-indigo-50 file:text-indigo-700
                                hover:file:bg-indigo-100">
                        </div>
                    
                    </div>

                    <button type="submit" 
                        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Update Profile
                    </button>
                </form>

                <div class="mt-12 pt-8 border-t border-gray-200">
                    <div class="space-y-4">
                        <h3 class="text-xl font-semibold text-red-600">Danger Zone</h3>
                        <p class="text-sm text-gray-600">Once you delete your account, there is no going back. Please be certain.</p>
                        <button onclick="confirmDeleteAccount()" 
                            class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                            Delete Account
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        let currentUserId = null;
        const token = localStorage.getItem('token');
        const userStr = localStorage.getItem('user');

        if (!token || !userStr) {
            Toastify({
                text: "Not logged in. Redirecting to login...",
                duration: 3000,
                className: "rounded-lg",
                style: {
                    background: "#EF4444",
                }
            }).showToast();
            window.location.href = '/login';
        }

        const user = JSON.parse(userStr);
        currentUserId = user.id || user._id;

        function updateUserInfo(userData) {
            const infoDiv = document.getElementById('info');
            infoDiv.innerHTML = `
                <div class="flex items-center space-x-4">
                    <img src="${userData.avatar}" alt="Profile" class="w-24 h-24 rounded-full object-cover border-4 border-indigo-200">
                    <div>
                        <h2 class="text-2xl font-bold text-gray-900">${userData.username}</h2>
                        <p class="text-gray-600">${userData.email}</p>
                        <p class="text-gray-500 mt-2">${userData.bio || 'No bio available'}</p>
                    </div>
                </div>
            `;
        }

        updateUserInfo(user);

        axios.get('https://express-backend-sigma.vercel.app/users/currentProfile', {
            headers: { 'Authorization': `Bearer ${token}` }
        })
        .then(res => {
            const freshUser = res.data;
            updateUserInfo(freshUser);
            localStorage.setItem('user', JSON.stringify(freshUser));
            currentUserId = freshUser.id || freshUser._id;
        })
        .catch(err => {
            console.warn('Could not refresh profile:', err);
            Toastify({
                text: "Error fetching profile",
                duration: 3000,
                className: "rounded-lg",
                style: {
                    background: "#EF4444",
                }
            }).showToast();
        });

        function logout() {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            window.location.href = '/login';
        }

        document.getElementById('updateForm').addEventListener('submit', async (event) => {
            event.preventDefault();

            const formData = new FormData();
            const username = document.getElementById('username').value.trim();
            const email = document.getElementById('email').value.trim();
            const password = document.getElementById('password').value.trim();
            const bio = document.getElementById('bio').value.trim();
            const avatar = document.getElementById('avatar').files[0];

            if (!username && !email && !password && !bio && !avatar) {
                Toastify({
                    text: "Please provide at least one field to update",
                    duration: 3000,
                    className: "rounded-lg",
                    style: {
                        background: "#EF4444",
                    }
                }).showToast();
                return;
            }

            if (username) formData.append('username', username);
            if (email) formData.append('email', email);
            if (password) formData.append('password', password);
            if (bio) formData.append('bio', bio);
            if (avatar) formData.append('avatar', avatar);

            try {
                const res = await fetch(`https://express-backend-sigma.vercel.app/users/upd/${currentUserId}`, {
                    method: 'PUT',
                    headers: { 'Authorization': `Bearer ${token}` },
                    body: formData
                });

                if (!res.ok) {
                    throw await res.json();
                }

                const updatedUser = await res.json();
                localStorage.setItem('user', JSON.stringify(updatedUser));
                updateUserInfo(updatedUser);

                Toastify({
                    text: "Profile updated successfully!",
                    duration: 3000,
                    className: "rounded-lg",
                    style: {
                        background: "#10B981",
                    }
                }).showToast();

                // Reset form
                event.target.reset();

            } catch (err) {
                Toastify({
                    text: err.message || "Error updating profile",
                    duration: 3000,
                    className: "rounded-lg",
                    style: {
                        background: "#EF4444",
                    }
                }).showToast();
            }
        });

        function confirmDeleteAccount() {
            if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
                fetch(`https://express-backend-sigma.vercel.app/users/del/${currentUserId}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${token}` }
                })
                .then(res => {
                    if (res.ok) {
                        Toastify({
                            text: "Account deleted successfully",
                            duration: 3000,
                            className: "rounded-lg",
                            style: {
                                background: "#10B981",
                            }
                        }).showToast();
                        logout();
                    } else {
                        throw new Error('Failed to delete account');
                    }
                })
                .catch(err => {
                    Toastify({
                        text: err.message || "Error deleting account",
                        duration: 3000,
                        className: "rounded-lg",
                        style: {
                            background: "#EF4444",
                        }
                    }).showToast();
                });
            }
        }
    </script>
</body>
</html>