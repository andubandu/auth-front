<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>socialnetto</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
</head>
<body class="bg-gray-50 min-h-screen">
    <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <h1 class="text-2xl font-bold text-indigo-600">socialnetto</h1>
                </div>
                <div id="btns" class="flex items-center space-x-4"></div>
            </div>
        </div>
    </nav>

    <div id="loader" class="hidden">
        <div class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white p-8 rounded-lg shadow-xl text-center">
                <img src="https://res.cloudinary.com/dyuabsnoo/image/upload/v1746875532/cat-kitten_rwstll.gif" alt="Loading..." class="w-64 h-auto mx-auto mb-4">
                <h2 class="text-xl font-semibold text-gray-700">Loading posts...</h2>
            </div>
        </div>
    </div>

    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div id="posts" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script>
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }

        async function fetchPosts() {
            const postsContainer = document.getElementById('posts');
            const loader = document.getElementById('loader');
            const token = getCookie('token');
            const userStr = getCookie('user');
            const currentUser = userStr ? JSON.parse(decodeURIComponent(userStr)) : null;

            loader.classList.remove('hidden');
            postsContainer.innerHTML = '';

            try {
                const response = await fetch('https://express-backend-sigma.vercel.app/posts');
                const posts = await response.json();

                const validPosts = posts.filter(post =>
                    post.author && post.author.username && post.author.username.trim() !== ''
                );

                if (validPosts.length === 0) {
                    postsContainer.innerHTML = '<h3 class="text-xl font-semibold text-gray-600 col-span-full text-center">No posts available</h3>';
                    return;
                }

                const postsWithLikes = await Promise.all(validPosts.map(async (post) => {
                    let likeCount = 0;
                    let isLikedByUser = false;

                    try {
                        const likesCountRes = await fetch(`https://express-backend-sigma.vercel.app/likes?postId=${post._id}&number=true`);
                        const likesCountData = await likesCountRes.json();
                        likeCount = typeof likesCountData.count === 'number' ? likesCountData.count : 0;

                        if (currentUser) {
                            const likesListRes = await fetch(`https://express-backend-sigma.vercel.app/likes?postId=${post._id}`);
                            const likesListData = await likesListRes.json();
                            isLikedByUser = likesListData.likes.some(like => like.userId === currentUser.id || like.userId === currentUser._id);
                        }
                    } catch (err) {
                        console.error(`Failed to fetch likes for post ${post._id}`, err);
                    }

                    return { ...post, likeCount, isLikedByUser };
                }));

                postsContainer.innerHTML = postsWithLikes.map(post => {
                    let mediaHTML = '';

                    if (post.media && post.media.url && post.media.type) {
                        if (post.media.type === 'video') {
                            mediaHTML = `
                                <video controls class="w-full h-auto rounded-lg shadow-md">
                                    <source src="${post.media.url}" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            `;
                        } else if (post.media.type === 'image') {
                            mediaHTML = `
                                <img src="${post.media.url}" alt="Post Media" class="w-full h-auto rounded-lg shadow-md" />
                            `;
                        }
                    }

                    const likeBtnClass = post.isLikedByUser ? 
                        'bg-pink-600 text-white' : 
                        'bg-white text-pink-600 border border-pink-600';

                    return `
                        <div class="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-xl transition-shadow duration-300">
                            <div class="p-6">
                                <a href="/posts/${post._id}" class="block mb-4">
                                    <h2 class="text-xl font-semibold text-gray-900 hover:text-indigo-600 transition-colors">${post.title}</h2>
                                </a>
                                <p class="text-gray-600 mb-4">${post.content}</p>

                                <div class="flex items-center mb-4">
                                    <img src="${post.author.avatar}" alt="Avatar of ${post.author.username}" 
                                        class="w-10 h-10 rounded-full object-cover" />
                                    <a href="/profile/${post.author.username}" 
                                        class="ml-3 font-medium text-gray-900 hover:text-indigo-600 transition-colors">
                                        ${post.author.username}
                                    </a>
                                </div>

                                <p class="text-sm text-gray-500 mb-4">${new Date(post.createdAt).toLocaleDateString()}</p>

                                ${mediaHTML}

                                <button class="mt-4 px-4 py-2 rounded-lg ${likeBtnClass} hover:opacity-90 transition-opacity flex items-center space-x-2" 
                                    data-id="${post._id}">
                                    <span>üëç</span>
                                    <span>${post.likeCount}</span>
                                </button>
                            </div>
                        </div>
                    `;
                }).join('');

                attachLikeButtonHandlers();

            } catch (error) {
                console.error('Error fetching posts:', error);
                postsContainer.innerHTML = '<h3 class="text-xl font-semibold text-red-600 col-span-full text-center">Failed to load posts</h3>';
            } finally {
                loader.classList.add('hidden');
            }
        }

        function attachLikeButtonHandlers() {
            const buttons = document.querySelectorAll('[data-id]');
            const token = getCookie('token');

            buttons.forEach(button => {
                button.addEventListener('click', async () => {
                    const postId = button.dataset.id;
                    const userStr = getCookie('user');
                    const currentUser = userStr ? JSON.parse(decodeURIComponent(userStr)) : null;

                    if (!token || !currentUser) {
                        showToast('You need to be logged in to like a post', '#ff6b6b');
                        return;
                    }

                    button.disabled = true;

                    try {
                        const response = await fetch(`https://express-backend-sigma.vercel.app/likes/${postId}`, {
                            method: 'POST',
                            headers: { 'Authorization': `Bearer ${token}` }
                        });

                        if (response.ok) {
                            const [countRes, listRes] = await Promise.all([
                                fetch(`https://express-backend-sigma.vercel.app/likes?postId=${postId}&number=true`),
                                fetch(`https://express-backend-sigma.vercel.app/likes?postId=${postId}`)
                            ]);

                            const countData = await countRes.json();
                            const listData = await listRes.json();

                            const updatedCount = typeof countData.count === 'number' ? countData.count : 0;
                            const isLikedByUser = listData.likes.some(like => like.userId === currentUser.id || like.userId === currentUser._id);

                            button.innerHTML = `<span>üëç</span><span>${updatedCount}</span>`;
                            button.className = `mt-4 px-4 py-2 rounded-lg flex items-center space-x-2 ${isLikedByUser ? 'bg-pink-600 text-white' : 'bg-white text-pink-600 border border-pink-600'} hover:opacity-90 transition-opacity`;

                            showToast(isLikedByUser ? 'Post liked!' : 'Post unliked', isLikedByUser ? '#28a745' : '#ff6b6b');
                        } else {
                            showToast('Failed to like/unlike post', '#ff6b6b');
                        }

                    } catch (error) {
                        console.error('Error liking/unliking post:', error);
                        showToast('An error occurred', '#ff6b6b');
                    } finally {
                        button.disabled = false;
                    }
                });
            });
        }

        function showToast(message, bgColor = "#333") {
            Toastify({
                text: message,
                duration: 2000,
                gravity: "top",
                position: "right",
                backgroundColor: bgColor,
                className: "rounded-lg"
            }).showToast();
        }

        function getState() {
            const btns = document.getElementById('btns');
            const token = getCookie('token');
            const user = getCookie('user');
            const userData = user ? JSON.parse(decodeURIComponent(user)) : null;
            
            if (!token || !userData) {
    btns.innerHTML = `
        <a href="/login" class="text-gray-600 hover:text-indigo-600 font-medium transition-colors">Login</a>
        <a href="/signup" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors">Sign Up</a>
    `;
} else if (userData && userData.roles && userData.roles[0] === 'admin') {
    btns.innerHTML = `
        <a href="/create" class="text-gray-600 hover:text-indigo-600 font-medium transition-colors">Create Post</a>
        <a href="/dashboard" class="text-gray-600 hover:text-indigo-600 font-medium transition-colors">Dashboard</a>
        <a href="/profile/${userData.username}" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors">Profile</a>
        <a href="/admin-panel" class="text-gray-600 hover:text-indigo-600 font-medium transition-colors">Admin Panel</a>
    `;
} else {
    btns.innerHTML = `
        <a href="/create" class="text-gray-600 hover:text-indigo-600 font-medium transition-colors">Create Post</a>
        <a href="/dashboard" class="text-gray-600 hover:text-indigo-600 font-medium transition-colors">Dashboard</a>
        <a href="/profile/${userData.username}" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors">Profile</a>
    `;
}


        }

        document.addEventListener('DOMContentLoaded', () => {
            getState();
            fetchPosts();
        });
    </script>
</body>
</html>