<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title><%= post.title %> - socialnetto</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" />
</head>
<body class="bg-gray-50 min-h-screen">
    <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <h1 class="text-2xl font-bold text-indigo-600">socialnetto</h1>
                </div>
                <div id="btns" class="flex items-center space-x-4"></div>
            </div>
        </div>
    </nav>

    <main class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <article class="bg-white rounded-xl shadow-lg overflow-hidden mb-8">
            <div class="p-8">
                <h1 class="text-3xl font-bold text-gray-900 mb-4"><%= post.title %></h1>
                <div class="flex items-center space-x-4 mb-6">
                    <img src="<%= post.author.avatar %>" alt="<%= post.author.username %>" class="w-12 h-12 rounded-full object-cover" />
                    <div>
                        <a href="/profile/<%= post.author.username %>" class="text-lg font-medium text-gray-900 hover:text-indigo-600 transition-colors">
                            <%= post.author.username %>
                        </a>
                        <p class="text-sm text-gray-500">
                            <%= new Date(post.createdAt).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                            }) %>
                        </p>
                    </div>
                </div>

                <p class="text-gray-700 text-lg mb-6"><%= post.content %></p>

                <% if (post.media && post.media.url) { %>
                    <div class="rounded-lg overflow-hidden mb-6">
                        <% if (post.media.type === 'video') { %>
                            <video controls class="w-full">
                                <source src="<%= post.media.url %>" type="video/mp4" />
                                Your browser does not support the video tag.
                            </video>
                        <% } else { %>
                            <img src="<%= post.media.url %>" alt="Post media" class="w-full" />
                        <% } %>
                    </div>
                <% } %>

                <div class="flex items-center space-x-4">
                    <button
                        id="likeButton"
                        class="flex items-center space-x-2 px-4 py-2 bg-pink-100 text-pink-600 rounded-lg hover:bg-pink-200 transition-colors"
                    >
                        <span>üëç</span>
                        <span id="likeCount"><%= likeCount %></span>
                    </button>

                    <div id="postActions" class="flex space-x-2">
                        <button onclick="openEditModal()" class="p-2 text-gray-600 hover:text-indigo-600 transition-colors">‚úèÔ∏è</button>
                        <button onclick="openDeleteModal()" class="p-2 text-gray-600 hover:text-red-600 transition-colors">üóëÔ∏è</button>
                    </div>
                </div>
            </div>
        </article>

        <section class="bg-white rounded-xl shadow-lg overflow-hidden">
            <div class="p-8">
                <h2 class="text-2xl font-bold text-gray-900 mb-6">Comments</h2>

                <div id="comment-section" class="space-y-6">
                    <% if (comments.length === 0) { %>
                        <p class="text-gray-500 text-center py-4">No comments yet. Be the first to comment!</p>
                    <% } %>

                    <% comments.forEach((comment) => { %>
                        <div
                            class="bg-gray-50 rounded-lg p-4 comment-card"
                            id="comment-<%= comment._id %>"
                            data-author-id="<%= comment.author._id %>"
                        >
                            <div class="flex items-center space-x-3 mb-2">
                                <img src="<%= comment.author.avatar %>" alt="<%= comment.author.username %>" class="w-8 h-8 rounded-full object-cover" />
                                <a href="/profile/<%= comment.author.username %>" class="font-medium text-gray-900 hover:text-indigo-600 transition-colors">
                                    <%= comment.author.username %>
                                </a>
                            </div>
                            <p class="text-gray-700"><%= comment.content %></p>
                            <div id="commentActions-<%= comment._id %>" class="mt-2 space-x-2 hidden">
                                <button
                                    onclick="startEdit('<%= comment._id %>')"
                                    class="text-sm text-gray-600 hover:text-indigo-600 transition-colors"
                                >
                                    ‚úèÔ∏è Edit
                                </button>
                                <button
                                    onclick="deleteComment('<%= post._id %>', '<%= comment._id %>')"
                                    class="text-sm text-gray-600 hover:text-red-600 transition-colors"
                                >
                                    üóëÔ∏è Delete
                                </button>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </div>
        </section>
    </main>

    <div id="editModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-xl max-w-lg w-full p-6">
            <h3 class="text-xl font-bold text-gray-900 mb-4">Edit Post</h3>
            <input
                type="text"
                id="editTitle"
                placeholder="New title"
                class="w-full px-3 py-2 border border-gray-300 rounded-md mb-4"
            />
            <textarea
                id="editContent"
                rows="4"
                placeholder="New content"
                class="w-full px-3 py-2 border border-gray-300 rounded-md mb-4"
            ></textarea>
            <input type="file" id="editMedia" accept="image/*, video/*" class="mb-4" />
            <p id="editMsg" class="text-red-600 mb-4"></p>
            <div class="flex justify-end space-x-3">
                <button
                    onclick="closeEditModal()"
                    class="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
                >
                    Cancel
                </button>
                <button
                    onclick="submitEditPost()"
                    class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
                >
                    Save Changes
                </button>
            </div>
        </div>
    </div>

    <div id="deleteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-xl max-w-lg w-full p-6">
            <h3 class="text-xl font-bold text-red-600 mb-4">Delete Post</h3>
            <p class="text-gray-600 mb-6">Are you sure you want to delete this post? This action cannot be undone.</p>
            <p id="deleteMsg" class="text-red-600 mb-4"></p>
            <div class="flex justify-end space-x-3">
                <button
                    onclick="closeDeleteModal()"
                    class="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
                >
                    Cancel
                </button>
                <button
                    onclick="confirmDeletePost()"
                    class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                >
                    Delete Post
                </button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script>
        function getState() {
            const btns = document.getElementById('btns');
            const token = localStorage.getItem('token');
            const user = localStorage.getItem('user');
            const userData = user ? JSON.parse(user) : null;

            if (!token || !userData) {
                btns.innerHTML = `
                    <a href="/login" class="text-gray-600 hover:text-indigo-600 transition-colors">Login</a>
                    <a href="/signup" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors">Sign Up</a>
                `;
            } else {
                btns.innerHTML = `
                    <a href="/" class="text-gray-600 hover:text-indigo-600 transition-colors">Home</a>
                    <a href="/create" class="text-gray-600 hover:text-indigo-600 transition-colors">Create Post</a>
                    <a href="/profile/${userData.username}" class="text-gray-600 hover:text-indigo-600 transition-colors">${userData.username}</a>
                    <button id="logoutBtn" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">Logout</button>
                `;

                document.getElementById('logoutBtn').addEventListener('click', () => {
                    localStorage.removeItem('token');
                    localStorage.removeItem('user');
                    location.reload();
                });
            }
        }

        function showToast(message, type = 'info') {
            Toastify({
                text: message,
                duration: 3000,
                close: true,
                gravity: 'top',
                position: 'right',
                backgroundColor:
                    type === 'success'
                        ? 'linear-gradient(to right, #4ade80, #16a34a)'
                        : type === 'error'
                        ? 'linear-gradient(to right, #f87171, #b91c1c)'
                        : 'linear-gradient(to right, #60a5fa, #3b82f6)',
            }).showToast();
        }

        // Show/hide comment action buttons (edit/delete) only if the logged user owns the comment
        document.addEventListener('DOMContentLoaded', () => {
            getState();

            const token = localStorage.getItem('token');
            let currentUserId = null;
            if (token) {
                try {
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    currentUserId = payload.id;
                } catch (e) {
                    console.error('Failed to decode token:', e);
                }
            }

            document.querySelectorAll('.comment-card').forEach((commentEl) => {
                const authorId = commentEl.dataset.authorId;
                const actionsEl = commentEl.querySelector('[id^="commentActions-"]');
                if (currentUserId && authorId === currentUserId) {
                    actionsEl.classList.remove('hidden');
                }
            });

            const postAuthorId = "<%= post.author._id %>";
            if (!(currentUserId && currentUserId === postAuthorId)) {
                document.getElementById('postActions').classList.add('hidden');
            }

            const likeButton = document.getElementById('likeButton');
            const likeCountElement = document.getElementById('likeCount');
            const postId = "<%= post._id %>";

            likeButton.addEventListener('click', async () => {
                if (!token) {
                    showToast('You need to be logged in to like posts', 'error');
                    return;
                }

                try {
                    const response = await fetch(`https://express-backend-sigma.vercel.app/likes/${postId}`, {
                        method: 'POST',
                        headers: { Authorization: `Bearer ${token}` },
                    });

                    if (response.ok) {
                        const countRes = await fetch(`https://express-backend-sigma.vercel.app/likes?postId=${postId}&number=true`);
                        const data = await countRes.json();
                        likeCountElement.textContent = data.count;
                        showToast('Like updated successfully', 'success');
                    } else {
                        showToast('Failed to update like', 'error');
                    }
                } catch (err) {
                    console.error(err);
                    showToast('Error updating like', 'error');
                }
            });

            if (token) {
                const commentSection = document.getElementById('comment-section');
                const commentForm = document.createElement('div');
                commentForm.className = 'mt-8';
                commentForm.innerHTML = `
                    <h3 class="text-xl font-bold text-gray-900 mb-4">Add a Comment</h3>
                    <textarea id="commentContent" rows="3" 
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                        placeholder="Write your comment here..."></textarea>
                    <button id="submitComment" 
                        class="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors">
                        Post Comment
                    </button>
                    <p id="commentMsg" class="text-red-600 mt-2"></p>
                `;
                commentSection.appendChild(commentForm);

                document.getElementById('submitComment').addEventListener('click', async () => {
                    const content = document.getElementById('commentContent').value.trim();
                    const commentMsg = document.getElementById('commentMsg');

                    if (!content) {
                        commentMsg.textContent = 'Comment cannot be empty';
                        return;
                    }

                    try {
                        const res = await fetch(`https://express-backend-sigma.vercel.app/comments/${postId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                Authorization: `Bearer ${token}`,
                            },
                            body: JSON.stringify({ content }),
                        });

                        if (res.ok) {
                            location.reload();
                        } else {
                            const err = await res.json();
                            commentMsg.textContent = err.error || 'Failed to post comment';
                        }
                    } catch (err) {
                        console.error(err);
                        commentMsg.textContent = 'Error posting comment';
                    }
                });
            }
        });

        // Functions for post edit modal
        function openEditModal() {
            document.getElementById('editModal').classList.remove('hidden');
            document.getElementById('editMsg').textContent = '';

            // Pre-fill current values
            document.getElementById('editTitle').value = "<%= post.title.replace(/"/g, '&quot;') %>";
            document.getElementById('editContent').value = `<%= post.content.replace(/"/g, '&quot;') %>`;
        }

        function closeEditModal() {
            document.getElementById('editModal').classList.add('hidden');
        }

        async function submitEditPost() {
            const title = document.getElementById('editTitle').value.trim();
            const content = document.getElementById('editContent').value.trim();
            const mediaInput = document.getElementById('editMedia');
            const editMsg = document.getElementById('editMsg');
            const token = localStorage.getItem('token');
            const postId = "<%= post._id %>";

            if (!title || !content) {
                editMsg.textContent = 'Title and content cannot be empty.';
                return;
            }

            let formData = new FormData();
            formData.append('title', title);
            formData.append('content', content);
            if (mediaInput.files.length > 0) {
                formData.append('media', mediaInput.files[0]);
            }

            try {
                const res = await fetch(`https://express-backend-sigma.vercel.app/posts/${postId}`, {
                    method: 'PUT',
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                    body: formData,
                });

                if (res.ok) {
                    showToast('Post updated successfully', 'success');
                    location.reload();
                } else {
                    const err = await res.json();
                    editMsg.textContent = err.error || 'Failed to update post';
                }
            } catch (err) {
                console.error(err);
                editMsg.textContent = 'Error updating post';
            }
        }

        // Functions for post delete modal
        function openDeleteModal() {
            document.getElementById('deleteModal').classList.remove('hidden');
            document.getElementById('deleteMsg').textContent = '';
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.add('hidden');
        }

        async function confirmDeletePost() {
            const token = localStorage.getItem('token');
            const postId = "<%= post._id %>";
            const deleteMsg = document.getElementById('deleteMsg');

            try {
                const res = await fetch(`https://express-backend-sigma.vercel.app/posts/${postId}`, {
                    method: 'DELETE',
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                });

                if (res.ok) {
                    showToast('Post deleted successfully', 'success');
                    window.location.href = '/';
                } else {
                    const err = await res.json();
                    deleteMsg.textContent = err.error || 'Failed to delete post';
                }
            } catch (err) {
                console.error(err);
                deleteMsg.textContent = 'Error deleting post';
            }
        }

        // Comment editing and deleting

        function startEdit(commentId) {
            const commentEl = document.getElementById(`comment-${commentId}`);
            const p = commentEl.querySelector('p');
            const originalContent = p.textContent;

            p.innerHTML = `
                <textarea id="editCommentContent-${commentId}" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md">${originalContent}</textarea>
                <div class="mt-2 flex space-x-2">
                    <button onclick="submitEditComment('${commentId}')" class="px-3 py-1 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors">Save</button>
                    <button onclick="cancelEditComment('${commentId}', '${originalContent.replace(/'/g, "\\'") }')" class="px-3 py-1 bg-gray-300 rounded hover:bg-gray-400 transition-colors">Cancel</button>
                </div>
            `;
        }

        function cancelEditComment(commentId, originalContent) {
            const commentEl = document.getElementById(`comment-${commentId}`);
            const p = commentEl.querySelector('p');
            p.textContent = originalContent;
        }

        async function submitEditComment(commentId) {
            const token = localStorage.getItem('token');
            const contentEl = document.getElementById(`editCommentContent-${commentId}`);
            const newContent = contentEl.value.trim();

            if (!newContent) {
                showToast('Comment content cannot be empty', 'error');
                return;
            }

            try {
                const res = await fetch(`https://express-backend-sigma.vercel.app/comments/${postId}/${commentId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${token}`,
                    },
                    body: JSON.stringify({ content: newContent }),
                });

                if (res.ok) {
                    showToast('Comment updated successfully', 'success');
                    location.reload();
                } else {
                    const err = await res.json();
                    showToast(err.error || 'Failed to update comment', 'error');
                }
            } catch (err) {
                console.error(err);
                showToast('Error updating comment', 'error');
            }
        }

        async function deleteComment(postId, commentId) {
            const confirmed = confirm('Are you sure you want to delete this comment?');
            if (!confirmed) return;

            const token = localStorage.getItem('token');

            try {
                const res = await fetch(`https://express-backend-sigma.vercel.app/comments/${postId}/${commentId}`, {
                    method: 'DELETE',
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                });

                if (res.ok) {
                    showToast('Comment deleted successfully', 'success');
                    location.reload();
                } else {
                    const err = await res.json();
                    showToast(err.error || 'Failed to delete comment', 'error');
                }
            } catch (err) {
                console.error(err);
                showToast('Error deleting comment', 'error');
            }
        }
    </script>
</body>
</html>
