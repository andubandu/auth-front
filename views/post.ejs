<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title><%= post.title %> - socialnetto</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
</head>
<body class="bg-gray-50 min-h-screen">
    <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <h1 class="text-2xl font-bold text-indigo-600">socialnetto</h1>
                </div>
                <div id="btns" class="flex items-center space-x-4"></div>
            </div>
        </div>
    </nav>

    <main class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <article class="bg-white rounded-xl shadow-lg overflow-hidden mb-8">
            <div class="p-8">
                <h1 class="text-3xl font-bold text-gray-900 mb-4"><%= post.title %></h1>
                
                <div class="flex items-center space-x-4 mb-6">
                    <img src="<%= post.author.avatar %>" alt="<%= post.author.username %>" 
                        class="w-12 h-12 rounded-full object-cover">
                    <div>
                        <a href="/profile/<%= post.author.username %>" 
                            class="text-lg font-medium text-gray-900 hover:text-indigo-600 transition-colors">
                            <%= post.author.username %>
                        </a>
                        <p class="text-sm text-gray-500">
                            <%= new Date(post.createdAt).toLocaleDateString('en-US', { 
                                year: 'numeric', 
                                month: 'long', 
                                day: 'numeric' 
                            }) %>
                        </p>
                    </div>
                </div>

                <p class="text-gray-700 text-lg mb-6"><%= post.content %></p>

                <% if (post.media && post.media.url) { %>
                    <div class="rounded-lg overflow-hidden mb-6">
                        <% if (post.media.type === 'video') { %>
                            <video controls class="w-full">
                                <source src="<%= post.media.url %>" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                        <% } else { %>
                            <img src="<%= post.media.url %>" alt="Post media" class="w-full">
                        <% } %>
                    </div>
                <% } %>

                <div class="flex items-center space-x-4">
                    <button id="likeButton" 
                        class="flex items-center space-x-2 px-4 py-2 bg-pink-100 text-pink-600 rounded-lg hover:bg-pink-200 transition-colors">
                        <span>üëç</span>
                        <span id="likeCount"><%= likeCount %></span>
                    </button>

                    <div id="postActions" class="flex space-x-2">
                        <button onclick="openEditModal()" 
                            class="p-2 text-gray-600 hover:text-indigo-600 transition-colors">
                            ‚úèÔ∏è
                        </button>
                        <button onclick="openDeleteModal()" 
                            class="p-2 text-gray-600 hover:text-red-600 transition-colors">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
            </div>
        </article>

        <section class="bg-white rounded-xl shadow-lg overflow-hidden">
            <div class="p-8">
                <h2 class="text-2xl font-bold text-gray-900 mb-6">Comments</h2>

                <div id="comment-section" class="space-y-6">
                    <% if (comments.length === 0) { %>
                        <p class="text-gray-500 text-center py-4">No comments yet. Be the first to comment!</p>
                    <% } %>

                    <% comments.forEach(comment => { %>
                        <div class="bg-gray-50 rounded-lg p-4">
                            <div class="flex items-center space-x-3 mb-2">
                                <img src="<%= comment.author.avatar %>" alt="<%= comment.author.username %>" 
                                    class="w-8 h-8 rounded-full object-cover">
                                <a href="/profile/<%= comment.author.username %>" 
                                    class="font-medium text-gray-900 hover:text-indigo-600 transition-colors">
                                    <%= comment.author.username %>
                                </a>
                            </div>
                            <p class="text-gray-700"><%= comment.content %></p>
                            <div id="commentActions-<%= comment._id %>" class="mt-2 space-x-2 hidden">
                                <button onclick="startEdit('<%= comment._id %>')" 
                                    class="text-sm text-gray-600 hover:text-indigo-600 transition-colors">
                                    ‚úèÔ∏è Edit
                                </button>
                                <button onclick="deleteComment('<%= post._id %>', '<%= comment._id %>')" 
                                    class="text-sm text-gray-600 hover:text-red-600 transition-colors">
                                    üóëÔ∏è Delete
                                </button>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </div>
        </section>
    </main>

    <!-- Edit Modal -->
    <div id="editModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-xl max-w-lg w-full p-6">
            <h3 class="text-xl font-bold text-gray-900 mb-4">Edit Post</h3>
            <input type="text" id="editTitle" placeholder="New title" 
                class="w-full px-3 py-2 border border-gray-300 rounded-md mb-4">
            <textarea id="editContent" rows="4" placeholder="New content" 
                class="w-full px-3 py-2 border border-gray-300 rounded-md mb-4"></textarea>
            <input type="file" id="editMedia" accept="image/*, video/*" class="mb-4">
            <p id="editMsg" class="text-red-600 mb-4"></p>
            <div class="flex justify-end space-x-3">
                <button onclick="closeEditModal()" 
                    class="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors">
                    Cancel
                </button>
                <button onclick="submitEditPost()" 
                    class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors">
                    Save Changes
                </button>
            </div>
        </div>
    </div>

    <!-- Delete Modal -->
    <div id="deleteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-xl max-w-lg w-full p-6">
            <h3 class="text-xl font-bold text-red-600 mb-4">Delete Post</h3>
            <p class="text-gray-600 mb-6">Are you sure you want to delete this post? This action cannot be undone.</p>
            <p id="deleteMsg" class="text-red-600 mb-4"></p>
            <div class="flex justify-end space-x-3">
                <button onclick="closeDeleteModal()" 
                    class="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors">
                    Cancel
                </button>
                <button onclick="confirmDeletePost()" 
                    class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                    Delete Post
                </button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script>
        function getState() {
            const btns = document.getElementById('btns');
            const token = localStorage.getItem('token');
            const user = localStorage.getItem('user');
            const userData = user ? JSON.parse(user) : null;
            
            if (!token || !userData) {
                btns.innerHTML = `
                    <a href="/login" class="text-gray-600 hover:text-indigo-600 transition-colors">Login</a>
                    <a href="/signup" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors">Sign Up</a>
                `;
            } else {
                btns.innerHTML = `
                    <a href="/" class="text-gray-600 hover:text-indigo-600 transition-colors">Home</a>
                    <a href="/create" class="text-gray-600 hover:text-indigo-600 transition-colors">Create Post</a>
                    <a href="/dashboard" class="text-gray-600 hover:text-indigo-600 transition-colors">Dashboard</a>
                    <a href="/profile/${userData.username}" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors">Profile</a>
                `;
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            getState();

            const token = localStorage.getItem('token');
            let currentUserId = null;

            if (token) {
                try {
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    currentUserId = payload.id;
                } catch (e) {
                    console.error('Failed to decode token:', e);
                }
            }

            // Show/hide comment action buttons
            const commentElements = document.querySelectorAll('[id^="commentActions-"]');
            commentElements.forEach(el => {
                const commentId = el.id.split('-')[1];
                const authorId = document.getElementById(`commentAuthor-${commentId}`)?.dataset.authorId;
                if (currentUserId && currentUserId === authorId) {
                    el.classList.remove('hidden');
                }
            });

            // Show/hide post actions
            const postAuthorId = "<%= post.author._id %>";
            if (!(currentUserId && currentUserId === postAuthorId)) {
                document.getElementById('postActions').classList.add('hidden');
            }

            // Setup like button
            const likeButton = document.getElementById('likeButton');
            const likeCountElement = document.getElementById('likeCount');
            const postId = "<%= post._id %>";

            likeButton.addEventListener('click', async () => {
                if (!token) {
                    showToast('You need to be logged in to like posts', 'error');
                    return;
                }

                try {
                    const response = await fetch(`https://express-backend-sigma.vercel.app/likes/${postId}`, {
                        method: 'POST',
                        headers: { 'Authorization': `Bearer ${token}` }
                    });

                    if (response.ok) {
                        const countRes = await fetch(`https://express-backend-sigma.vercel.app/likes?postId=${postId}&number=true`);
                        const data = await countRes.json();
                        likeCountElement.textContent = data.count;
                        showToast('Like updated successfully', 'success');
                    } else {
                        showToast('Failed to update like', 'error');
                    }
                } catch (err) {
                    console.error(err);
                    showToast('Error updating like', 'error');
                }
            });

            // Setup comment section
            if (token) {
                const commentSection = document.getElementById('comment-section');
                const commentForm = document.createElement('div');
                commentForm.className = 'mt-8';
                commentForm.innerHTML = `
                    <h3 class="text-xl font-bold text-gray-900 mb-4">Add a Comment</h3>
                    <textarea id="commentContent" rows="3" 
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                        placeholder="Write your comment here..."></textarea>
                    <button id="submitComment" 
                        class="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors">
                        Post Comment
                    </button>
                    <p id="commentMsg" class="text-red-600 mt-2"></p>
                `;
                commentSection.appendChild(commentForm);

                document.getElementById('submitComment').addEventListener('click', async () => {
                    const content = document.getElementById('commentContent').value.trim();
                    const commentMsg = document.getElementById('commentMsg');

                    if (!content) {
                        commentMsg.textContent = 'Comment cannot be empty';
                        return;
                    }

                    try {
                        const res = await fetch(`https://express-backend-sigma.vercel.app/comments/${postId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${token}`
                            },
                            body: JSON.stringify({ content })
                        });

                        if (res.ok) {
                            location.reload();
                        } else {
                            const err = await res.json();
                            commentMsg.textContent = err.error || 'Failed to post comment';
                        }
                    } catch (err) {
                        console.error(err);
                        commentMsg.textContent = 'Error posting comment';
                    }
                });
            }
        });

        function showToast(message, type = 'info') {
            const bgColors = {
                success: '#10B981',
                error: '#EF4444',
                info: '#3B82F6'
            };

            Toastify({
                text: message,
                duration: 3000,
                className: "rounded-lg",
                style: {
                    background: bgColors[type] || bgColors.info
                }
            }).showToast();
        }

        // Modal functions
        function openEditModal() {
            document.getElementById('editModal').classList.remove('hidden');
        }

        function closeEditModal() {
            document.getElementById('editModal').classList.add('hidden');
        }

        async function submitEditPost() {
            const token = localStorage.getItem('token');
            const postId = "<%= post._id %>";
            const title = document.getElementById('editTitle').value.trim();
            const content = document.getElementById('editContent').value.trim();
            const mediaFile = document.getElementById('editMedia').files[0];
            const msg = document.getElementById('editMsg');

            if (!title && !content && !mediaFile) {
                msg.textContent = 'At least one field must be updated';
                return;
            }

            if (!token) {
                msg.textContent = 'You must be logged in to edit the post';
                return;
            }

            const formData = new FormData();
            if (title) formData.append('title', title);
            if (content) formData.append('content', content);
            if (mediaFile) formData.append('media', mediaFile);

            try {
                const res = await fetch(`https://express-backend-sigma.vercel.app/posts/upd/${postId}`, {
                    method: 'PUT',
                    headers: { 'Authorization': `Bearer ${token}` },
                    body: formData
                });

                if (res.ok) {
                    location.reload();
                } else {
                    const err = await res.json();
                    msg.textContent = err.error || 'Failed to update post';
                }
            } catch (err) {
                console.error(err);
                msg.textContent = 'Error updating post';
            }
        }

        function openDeleteModal() {
            document.getElementById('deleteModal').classList.remove('hidden');
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.add('hidden');
        }

        async function confirmDeletePost() {
            const token = localStorage.getItem('token');
            const postId = "<%= post._id %>";
            const msg = document.getElementById('deleteMsg');

            if (!token) {
                msg.textContent = 'You must be logged in to delete the post';
                return;
            }

            try {
                const res = await fetch(`https://express-backend-sigma.vercel.app/posts/del/${postId}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (res.ok) {
                    window.location.href = '/';
                } else {
                    const err = await res.json();
                    msg.textContent = err.error || 'Failed to delete post';
                }
            } catch (err) {
                console.error(err);
                msg.textContent = 'Error deleting post';
            }
        }

        async function startEdit(commentId) {
            const element = document.getElementById(`commentAuthor-${commentId}`).closest('.comment-card');
            const contentPara = element.querySelector('p');
            const oldContent = contentPara.textContent;
            const newContent = prompt('Edit your comment:', oldContent);
            const token = localStorage.getItem('token');
            const postId = "<%= post._id %>";

            if (newContent !== null && token) {
                try {
                    const res = await fetch(`https://express-backend-sigma.vercel.app/comments/${postId}/${commentId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({ content: newContent })
                    });

                    if (res.ok) {
                        contentPara.textContent = newContent;
                        showToast('Comment updated successfully', 'success');
                    } else {
                        showToast('Failed to update comment', 'error');
                    }
                } catch (err) {
                    console.error(err);
                    showToast('Error updating comment', 'error');
                }
            }
        }

        async function deleteComment(postId, commentId) {
            if (!confirm('Are you sure you want to delete this comment?')) {
                return;
            }

            const token = localStorage.getItem('token');
            if (!token) {
                showToast('You must be logged in to delete comments', 'error');
                return;
            }

            try {
                const res = await fetch(`https://express-backend-sigma.vercel.app/comments/${postId}/${commentId}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (res.ok) {
                    const commentElement = document.getElementById(`commentAuthor-${commentId}`).closest('.bg-gray-50');
                    commentElement.remove();
                    showToast('Comment deleted successfully', 'success');
                } else {
                    showToast('Failed to delete comment', 'error');
                }
            } catch (err) {
                console.error(err);
                showToast('Error deleting comment', 'error');
            }
        }
    </script>
</body>
</html>