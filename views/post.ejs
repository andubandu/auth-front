<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><%= post.title %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <style>
body {
  font-family: Arial, sans-serif;
  margin: 20px;
  padding: 0;
  background-color: #f9f9f9;
  color: #333;
}

h1, h2, h3 {
  margin-bottom: 15px;
}

a {
  color: #1e90ff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

.post-container {
  background: #fff;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 4px 10px rgba(0,0,0,0.05);
  margin-bottom: 30px;
}

.post-container img {
  max-width: 100%;
  height: auto;
  border-radius: 8px;
  margin: 10px 0;
}

.author-line {
  display: flex;
  align-items: center;
  margin-top: 15px;
  margin-bottom: 15px;
  font-size: 0.9rem;
  color: #666;
}

.avatar, .comment-avatar {
  display: inline-block;
  aspect-ratio: 1 / 1;
  border-radius: 50%;
  object-fit: cover;
  overflow: hidden;
  margin-right: 8px;
  flex-shrink: 0;
}

.avatar {
  width: 40px;
  height: 40px;
}

.comment-avatar {
  width: 30px;
  height: 30px;
}

.btn {
  padding: 8px 14px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.95rem;
  margin-right: 8px;
  transition: background-color 0.3s ease;
}

.btn-primary { background-color: #1e90ff; color: white; }
.btn-primary:hover { background-color: #187bcd; }

.btn-danger { background-color: #dc3545; color: white; }
.btn-danger:hover { background-color: #b02a37; }

.btn-secondary { background-color: #6c757d; color: white; }
.btn-secondary:hover { background-color: #565e64; }

.comment-card {
  background: #fff;
  padding: 15px;
  border-radius: 10px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.05);
  margin-bottom: 15px;
}

#comment-section textarea {
  width: 100%;
  padding: 10px;
  border-radius: 8px;
  border: 1px solid #ccc;
  resize: vertical;
  margin-bottom: 10px;
}

.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0; top: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.5);
  justify-content: center;
  align-items: center;
}

.modal-content {
  background: white;
  padding: 20px;
  border-radius: 12px;
  width: 90%;
  max-width: 400px;
  box-shadow: 0 4px 10px rgba(0,0,0,0.2);
}

.modal-content input,
.modal-content textarea {
  width: 100%;
  margin-bottom: 10px;
  padding: 8px;
  border-radius: 6px;
  border: 1px solid #ccc;
}

@media (max-width: 600px) {
  .avatar {
    width: 30px;
    height: 30px;
  }
  .comment-avatar {
    width: 25px;
    height: 25px;
  }
  .btn {
    padding: 6px 10px;
    font-size: 0.85rem;
  }
}

    </style>
</head>
<body>

<div class="post-container">
  <h1><%= post.title %></h1>
  <p><%= post.content %></p>

  <% if (post.media && post.media.url) { %>
    <img src="<%= post.media.url %>" alt="Post media">
  <% } %>

  <div class="author-line">
    <% if (post.author.avatar) { %>
      <img src="<%= post.author.avatar %>" alt="Author Avatar" class="avatar">
    <% } %>
    <span>By <a href="/profile/<%= post.author.username %>"><strong><%= post.author.username %></strong></a></span>
  </div>

  <button id="likeButton" class="btn btn-primary">Like</button> <span id="likeCount"><%= likeCount %></span> likes

  <div id="postActions" style="margin-top:15px;">
    <button onclick="openEditModal()" class="btn btn-primary" style="background-color: transparent;">‚úèÔ∏è</button>
    <button onclick="openDeleteModal()" class="btn btn-danger" style="background-color: transparent;">üóëÔ∏è</button>
  </div>
</div>

<h2>Comments</h2>
<% comments.forEach(comment => { %>
  <div class="comment-card">
    <div class="author-line">
      <% if (comment.author.avatar) { %>
        <img src="<%= comment.author.avatar %>" alt="Commenter Avatar" class="comment-avatar">
      <% } %>
      <a href="/profile/<%= comment.author.username %>">
        <strong id="commentAuthor-<%= comment._id %>" data-author-id="<%= comment.author._id %>"><%= comment.author.username %></strong>
      </a>
    </div>
    <p><%= comment.content %></p>
    <div id="commentActions-<%= comment._id %>">
      <button onclick="startEdit('<%= comment._id %>')" class="btn btn-secondary">‚úèÔ∏è</button>
      <button onclick="deleteComment('<%= post._id %>', '<%= comment._id %>')" class="btn btn-danger">üóëÔ∏è</button>
    </div>
  </div>
<% }) %>

<div id="comment-section"></div>

<div id="editModal" class="modal">
  <div class="modal-content">
    <h3>Edit Post</h3>
    <input type="text" id="editTitle" placeholder="New title (optional)">
    <textarea id="editContent" rows="4" placeholder="New content (optional)"></textarea>
    <input type="file" id="editMedia">
    <p id="editMsg" style="color:red;"></p>
    <button onclick="submitEditPost()" class="btn btn-primary">Save</button>
    <button onclick="closeEditModal()" class="btn btn-secondary">Cancel</button>
  </div>
</div>

<div id="deleteModal" class="modal">
  <div class="modal-content">
    <h3>Confirm Delete</h3>
    <p>Are you sure you want to delete this post?</p>
    <p id="deleteMsg" style="color:red;"></p>
    <button onclick="confirmDeletePost()" class="btn btn-danger">Delete</button>
    <button onclick="closeDeleteModal()" class="btn btn-secondary">Cancel</button>
  </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const token = localStorage.getItem('token');
  let currentUserId = null;

  if (token) {
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      currentUserId = payload.id;
    } catch (e) {
      console.error('Failed to decode token:', e);
    }
  }

  const commentElements = document.querySelectorAll('[id^="commentActions-"]');
  commentElements.forEach(el => {
    const commentId = el.id.split('-')[1];
    const authorId = document.getElementById(`commentAuthor-${commentId}`).dataset.authorId;
    if (currentUserId && currentUserId === authorId) {
      el.style.display = 'block';
    } else {
      el.style.display = 'none';
    }
  });

  const postAuthorId = "<%= post.author._id %>";
  if (!(currentUserId && currentUserId === postAuthorId)) {
    document.getElementById('postActions').style.display = 'none';
  }

  const likeButton = document.getElementById('likeButton');
  const likeCountElement = document.getElementById('likeCount');
  const postId = "<%= post._id %>";

  likeButton.addEventListener('click', async () => {
    if (!token) {
      alert('You need to be logged in to like a post');
      return;
    }
    try {
      const likeResponse = await fetch(`https://express-backend-sigma.vercel.app/likes/${postId}`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (likeResponse.ok) {
        const countRes = await fetch(`https://express-backend-sigma.vercel.app/likes?postId=${postId}&number=true`);
        const data = await countRes.json();
        likeCountElement.textContent = data.count;
      } else {
        alert('Failed to like the post');
      }
    } catch (err) {
      console.error(err);
      alert('Error liking post');
    }
  });

  const commentSection = document.getElementById('comment-section');
  if (token) {
    commentSection.innerHTML = `
      <h3>Add a Comment</h3>
      <textarea id="commentContent" rows="3" placeholder="Write your comment here..."></textarea><br>
      <button id="submitComment" class="btn btn-primary">Post Comment</button>
      <p id="commentMsg" style="color:red; margin-top:5px;"></p>
    `;

    document.getElementById('submitComment').addEventListener('click', async () => {
      const content = document.getElementById('commentContent').value.trim();
      const commentMsg = document.getElementById('commentMsg');
      if (!content) {
        commentMsg.textContent = 'Comment cannot be empty.';
        return;
      }

      try {
        const res = await fetch(`https://express-backend-sigma.vercel.app/comments/${postId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ content })
        });

        if (res.ok) {
          location.reload();
        } else {
          const err = await res.json();
          commentMsg.textContent = err.error || 'Failed to post comment.';
        }
      } catch (err) {
        console.error(err);
        commentMsg.textContent = 'Error posting comment.';
      }
    });
  }
});

function openEditModal() {
  document.getElementById('editModal').style.display = 'flex';
  document.getElementById('editMsg').textContent = '';
}
function closeEditModal() {
  document.getElementById('editModal').style.display = 'none';
}
async function submitEditPost() {
  const token = localStorage.getItem('token');
  const postId = "<%= post._id %>";
  const title = document.getElementById('editTitle').value.trim();
  const content = document.getElementById('editContent').value.trim();
  const mediaFile = document.getElementById('editMedia').files[0];
  const msg = document.getElementById('editMsg');

  if (!title && !content && !mediaFile) {
    msg.textContent = 'At least one field must be updated.';
    return;
  }

  if (!token) {
    msg.textContent = 'You must be logged in to edit the post.';
    return;
  }

  const formData = new FormData();
  if (title) formData.append('title', title);
  if (content) formData.append('content', content);
  if (mediaFile) formData.append('media', mediaFile);

  try {
    const res = await fetch(`https://express-backend-sigma.vercel.app/posts/upd/${postId}`, {
      method: 'PUT',
      headers: { 'Authorization': `Bearer ${token}` },
      body: formData
    });

    if (res.ok) {
      location.reload();
    } else {
      const err = await res.json();
      msg.textContent = err.error || 'Failed to update post.';
    }
  } catch (err) {
    console.error(err);
    msg.textContent = 'Error updating post.';
  }
}

function openDeleteModal() {
  document.getElementById('deleteModal').style.display = 'flex';
  document.getElementById('deleteMsg').textContent = '';
}
function closeDeleteModal() {
  document.getElementById('deleteModal').style.display = 'none';
}
async function confirmDeletePost() {
  const token = localStorage.getItem('token');
  const postId = "<%= post._id %>";
  const msg = document.getElementById('deleteMsg');

  if (!token) {
    msg.textContent = 'You must be logged in to delete the post.';
    return;
  }

  try {
    const res = await fetch(`https://express-backend-sigma.vercel.app/posts/del/${postId}`, {
      method: 'DELETE',
      headers: { 'Authorization': `Bearer ${token}` }
    });

    if (res.ok) {
      window.location.href = '/';
    } else {
      const err = await res.json();
      msg.textContent = err.error || 'Failed to delete post.';
    }
  } catch (err) {
    console.error(err);
    msg.textContent = 'Error deleting post.';
  }
}

async function startEdit(commentId) {
  const element = document.getElementById(`commentAuthor-${commentId}`).closest('.comment-card');
  const contentPara = element.querySelector('p');
  const oldContent = contentPara.textContent;
  const newContent = prompt('Edit your comment:', oldContent);
  const token = localStorage.getItem('token');
  const postId = "<%= post._id %>";

  if (newContent !== null && token) {
    try {
      const res = await fetch(`https://express-backend-sigma.vercel.app/comments/${postId}/${commentId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ content: newContent })
      });

      if (res.ok) {
        contentPara.textContent = newContent;
      } else {
        alert('Failed to update comment');
      }
    } catch (err) {
      console.error(err);
      alert('Error updating comment');
    }
  }
}

async function deleteComment(postId, commentId) {
  const confirmDelete = confirm('Are you sure you want to delete this comment?');
  const token = localStorage.getItem('token');

  if (confirmDelete && token) {
    try {
      const res = await fetch(`https://express-backend-sigma.vercel.app/comments/${postId}/${commentId}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (res.ok) {
        document.getElementById(`commentAuthor-${commentId}`).closest('.comment-card').remove();
      } else {
        alert('Failed to delete comment');
      }
    } catch (err) {
      console.error(err);
      alert('Error deleting comment');
    }
  }
}
</script>

</body>
</html>
